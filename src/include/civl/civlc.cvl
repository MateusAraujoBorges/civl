/* This header file contains the core definitions of the CIVL-C language,
 * including standard types and function prototypes.
 */

#ifndef __CIVLC_CIVL__
#define __CIVLC_CIVL__

#include <civlc.cvh>
//#include <domain.cvh>

/* Completes the declaration of this type in civlc.cvh */
struct $int_iter {
  int size;
  int content[];
  int index; //initialized as 0
};

int $int_div(int numerator, int denominator) {
  if(denominator == 0) {
    //undefined
    return 0;
  }
  if(numerator == 0) return 0;

  int positiveNumerator = numerator < 0 ? numerator * -1 : numerator;
  int positiveDenominator = denominator < 0 ? denominator * -1 : denominator;
  int positiveQuotient = positiveNumerator / positiveDenominator;

  if(numerator > 0 && denominator > 0) {
    return positiveQuotient;
  } else if(numerator > 0 && denominator < 0) {
    return -1 * positiveQuotient;
  } else if(numerator < 0 && denominator > 0) {
    return -1 * positiveQuotient;
  } else if(numerator < 0 && denominator < 0) {
    return positiveQuotient;
  } else
    return 0;
}

int $int_mod(int numerator, int denominator) {
  if(denominator == 0) {
    //undefined
    return 0;
  }
  if(numerator == 0) return 0;

  int positiveNumerator= numerator < 0 ? numerator * -1 : numerator;
  int positiveDenominator = denominator < 0 ? denominator * -1 : denominator;
  int positiveQuotient = positiveNumerator % positiveDenominator;

  if(numerator < 0)
    return positiveQuotient * -1;
  else
    return positiveQuotient;
}

/*void $elaborate(int x) {
  if(!$is_concrete_int(x))
    for(int i=0; i<x; i++);
}*/

/*
void $elaborate_rectangular_domain($domain domain){
  if(!$is_rectangular_domain(domain))
   return;
  for(int i=0; i<$dimension_of(domain); i++){
    $range range=$range_of_rectangular_domain(domain, i);
    
    if(!($is_regular_range(range)))
      continue;

    int high=$high_of_regular_range(range);
    int low=$low_of_regular_range(range);

    if(!$is_concrete_int(high))
      $elaborate(high);
    if(!$is_concrete_int(low))
      $elaborate(low);
  }
}*/

#endif
